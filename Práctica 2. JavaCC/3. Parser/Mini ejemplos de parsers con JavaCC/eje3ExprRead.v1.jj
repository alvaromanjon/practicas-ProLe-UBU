/*
 * Parser aceptador de expresiones aritméticas.
 * Gramática obtenida de la eliminación de la recursividad.
 */

PARSER_BEGIN(ExprRead1)

public class ExprRead1 {

  public static void main(String args[]) throws ParseException {
    ExprRead1 parser = new ExprRead1(System.in);
    System.err.println("input? ");
    parser.Read();
    System.out.println("Accepted!");
  }

}

PARSER_END(ExprRead1)

SKIP : { " " | "\t" | "\n" | "\r" }
TOKEN : { < NUM: ( ["0"-"9"] )+ > }

void Read() : { }
{
  Expression() ";"
  <EOF>
}

void Expression() : { }
{
  Term() ExpresionP()
}

void ExpresionP() : { }
{
  (  "+" Term() ExpresionP() 
   | "-" Term() ExpresionP() 
  ) ?
}

void Term() : { }
{
  Factor() TermpP()
}

void TermpP() : { }
{
  // [ "*" Factor() TermpP() ]
  ( "*" Factor() TermpP() ) ?
}


void Factor() : { }
{
  <NUM>
| "(" Expression() ")"
| "-" Term() // menos unario
}
