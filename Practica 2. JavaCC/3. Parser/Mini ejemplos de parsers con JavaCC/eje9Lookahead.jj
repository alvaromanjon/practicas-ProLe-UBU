/*
 * Ejemplo de como se puede usar LOOKAHEAD para arreglar conflictos.
 * También se ilustra como leer de un archivo y las opciones de depurado.
 */
options {
  /*
   *     Activando esta opción, el parser genera una traza de sus
   *     acciones. Se puede desactivar invocando al método
   *     disable_tracing() y volver a activar invocando a
   *     enable_tracing().
   */
  DEBUG_PARSER=false;
  /*
   *     Activando esta opción, el parser además la información que
   *     genera con DEBUG_PARSER, muestra información adicional
   *     sobre las acciones que lleva a cabo en las operaciones de
   *     lookahead.
  */
  DEBUG_LOOKAHEAD=false;
  /*
   *     Activando esta opción, el TokenManager muestra una traza
   *     del proceso de reconocimiento de toekens.
  */
  DEBUG_TOKEN_MANAGER=false;
}

PARSER_BEGIN(Lookahead)

public class Lookahead {
   public static void main(String[] args) {
      Lookahead parser;
      try {
         if ( args.length < 1 ) {
            System.err.println("input?");
            parser = new Lookahead(System.in);
         } else {
            parser = new Lookahead(new java.io.FileReader(args[0]));
         };
         parser.S();
         System.out.println("Syntax is okay");
      } catch (java.io.IOException e) {
         System.out.println("Problem opening file: "+e.getMessage());
      } catch (TokenMgrError e) {
         System.out.println("TokenManager failed: " + e.getMessage());
      } catch (ParseException e) {
         System.out.println("Syntax check failed: " + e.getMessage());
      }
   }
}

PARSER_END(Lookahead)

SKIP: { " " | "\t" | "\n" | "\r" }
TOKEN: {
    "(" | ")" | "+" | "*" | ":="
    | <NUM: (["0"-"9"])+> | <ID: (["a"-"z"])+>
}

void S(): {} { E() <EOF>                                   }
// Next production gives a choice conflict
//void E(): {} { <ID> ":=" E() | T() ("+" T())* }
// Next production solves the problemwg
void E(): {} { LOOKAHEAD(<ID> ":=" ) <ID> ":=" E() | T() ("+" T())* }
void T(): {} { F() ("*" F())*                              }
void F(): {} { <NUM> | <ID> | "(" E() ")"                  }
