/*
 * Parser para traducir expresiones a código de máquina de pila abstracta.
 * Traducción emitida a medida que se lee la entrada. 
 */
PARSER_BEGIN(ExprToMaqPila1)

public class ExprToMaqPila1{

  public static void main(String args[]) throws ParseException {
    ExprToMaqPila1 parser = new ExprToMaqPila1(System.in);
    System.err.println("\ninput? ");
    parser.AssignmentList();
  }

}

PARSER_END(ExprToMaqPila1)

SKIP : { " " | "\t" | "\n" | "\r" }
TOKEN : {
   < NUM: (<D>)+ >
 | < ID: <L>(<L>|<D>)* > 
 | <#L: ["a"-"z","A"-"Z"] > 
 | <#D: ["0"-"9"] > 
}

void AssignmentList() : 
{ Token tk; }
{
  ( tk=<ID> ":=" 
    { System.out.println("valori "+tk.image); } 
    Expression() ";"
    { System.out.println("asigna"); }
  )*
  <EOF>
}

void Expression() : { }
{
  Term()
  (  "+" Term()  { System.out.println("add"); }
   | "-" Term()  { System.out.println("sub"); }
  )*
}

void Term() : { }
{
  Factor()
  (  "*" Factor() { System.out.println("mul"); }
   | "/" Factor() { System.out.println("div"); }
  )*
}

void Factor() :
{
  Token tk;
}
{
 (  tk=<NUM> { System.out.println("mete "+tk.image); }
  | "(" Expression() ")"
  | tk=<ID>  { System.out.println("valord "+tk.image); }
 ) 
}
