PARSER_BEGIN(MaqPilaAbstrTrad)

public class MaqPilaAbstrTrad {
   public static void main(String[] args) {
      MaqPilaAbstrTrad parser;
      try {
         if ( args.length < 1 ) {
            System.err.println("input?");
            parser = new MaqPilaAbstrTrad(System.in);
         } else {
            parser = new MaqPilaAbstrTrad(new java.io.FileReader(args[0]));
         }
         parser.stmtsequence();
         System.out.println("Syntax is okay");
      } catch (java.io.IOException e) {
         System.out.println("Problem opening file: "+e.getMessage());
      } catch (TokenMgrError e) {
         System.out.println("TokenManager failed: " + e.getMessage());
      } catch (ParseException e) {
         System.out.println("Syntax check failed: " + e.getMessage());
      }
   }

   static private int nextNumber = -1;

   private static int getNextNumber() {
       return ++nextNumber;
   }
}

PARSER_END(MaqPilaAbstrTrad)

SKIP: { " " | "\t" | "\n" | "\r" }

TOKEN : {
    < #DIGIT : ["0"-"9"] >
    | < #LETTER : ["a"-"z","A"-"Z"] >
    | < REPEAT : "repeat" >
    | < UNTIL : "until" >
    | < IF : "if" >
    | < THEN : "then" >
    | < ENDIF : "endif" >
    | < SWITCH : "switch" >
    | < ENDSWITCH : "endswitch" >
    | < ELSE : "else" >
    | < CASE : "case" >
    | < RANGE : "range" >
    | < PRINT : "print" >
    | < ID : <LETTER> (<LETTER> | <DIGIT>)* >
    | < NUM : (<DIGIT>)+ >
    | < EQUAL : "=" >
    | < COLON : ":" >
    | < RANGEDOTS : ".." >
    | < COMMA : "," >
    | < OPENPAREN: "(" >
    | < CLOSEPAREN: ")" >
    | < PLUS: "+" >
    | < MINUS: "-" >
    | < MULTIPLY: "*" >
    | < DIVIDE: "/" >
}

MORE: {
    <StartCOM : "/*"> : COM
}

<COM>SKIP: {
    <EndCom : "*/"> : DEFAULT
    | < ~[]>
}

void stmtsequence() : {
}
{
    programstmt() stmtsequenceP()
}

void stmtsequenceP() : {
}
{
    ( programstmt() stmtsequenceP() )?
}

void programstmt() : {
}
{
    assigconstruct()
    | loopconstruct()
    | ifconstruct()
    | switchconstruct()
    | printstmt()
}

void loopconstruct() : {
    int label = getNextNumber();
}
{
    <REPEAT> { System.out.println("LBL" + label); }
    stmtsequence() <UNTIL> expr() { System.out.println("\tsifalsovea LBL" + label); }
}

void ifconstruct() : {
    int label = getNextNumber();
}
{
    <IF> expr()
    { System.out.println("\tigual");
    System.out.println("\tsifalsovea LBL" + label); }
    <THEN> stmtsequence() <ENDIF>
    { System.out.println("LBL" + label); }
}

void switchconstruct() : {
    int initialLabel = getNextNumber();
    int currentLabel = -1;
}
{
    <SWITCH> expr() <COLON>
    currentLabel = listtests(initialLabel)
    (<ENDSWITCH>
    { System.out.println("LBL" + currentLabel);
    System.out.println("\tvea LBL" + initialLabel);
    System.out.println("LBL" + initialLabel); }
    | <ELSE> <COLON>
    { System.out.println("LBL" + currentLabel); }
     stmtsequence() <ENDSWITCH>
    { System.out.println("LBL" + initialLabel); } )
}

int listtests(int firstLabel) : {
    int currentLabel = -1;
    int isFirstElem = -1;
}
{
    currentLabel = test(firstLabel, currentLabel, isFirstElem)
    {isFirstElem = 0; }
    currentLabel = listtestsP(firstLabel, currentLabel, isFirstElem)
    { return currentLabel; }
}

int listtestsP(int firstLabel, int currentLabel, int isFirstElem) : {
}
{
    ( currentLabel = test(firstLabel, currentLabel, isFirstElem)
    currentLabel = listtestsP(firstLabel, currentLabel, isFirstElem) )?
    { return currentLabel; }
}

int test(int firstLabel, int currentLabel, int isFirstElem) : {
    int nextLabel = -1;
    if (isFirstElem == 0) { System.out.println("LBL" + currentLabel); }
}
{
    <CASE>
    { System.out.println("\tduplica"); }
    expr() <COLON>
    { System.out.println("\tigual");
    nextLabel = getNextNumber();
    System.out.println("\tsifalsovea LBL" + nextLabel); }
    stmtsequence()
    { System.out.println("\tvea LBL" + firstLabel); }
    { return nextLabel; }
    |
    <RANGE>
    { System.out.println("\tduplica"); }
    expr()
    { System.out.println("\tintercambia");
    System.out.println("\tmenoroigual");
    nextLabel = getNextNumber();
    System.out.println("\tsifalsovea LBL" + nextLabel); }
    <RANGEDOTS>
    { System.out.println("\tduplica"); }
    expr() <COLON>
    { System.out.println("\tmenoroigual");
    System.out.println("\tsifalsovea LBL" + nextLabel); }
    stmtsequence()
    { System.out.println("\tvea LBL" + firstLabel); }
    {return nextLabel;}
}

void printstmt() : {
    int res = 0;
}
{
    <PRINT>
    res = listexpr()  { System.out.println("\tprint " + res); }
}

int listexpr() : {
    int res;
}
{
    expr() { res = 1; }
    res = listexprP(res)
    { return res; }
}

int listexprP(int res) : {
}
{
    ( <COMMA> expr() { res = res + 1; } res = listexprP(res) )?
    { return res; }
}

void assigconstruct() : {
    Token tk;
}
{
    tk=<ID> <EQUAL>
    { System.out.println("\tvalori " + tk.image); }
    expr()
    { System.out.println("\tasigna"); }

}

void expr() : {
}
{
    multexpr() ( <PLUS> multexpr() { System.out.println("\tsum"); }
    | <MINUS> multexpr() { System.out.println("\tsub"); } )*
}

void multexpr() : {
}
{
    value() ( <MULTIPLY> value()  { System.out.println("\tmul"); }
    | <DIVIDE> value() { System.out.println("\tdiv"); } )*
}

void value() : {
   Token tk;
}
{
    <OPENPAREN> expr() <CLOSEPAREN>
    | tk = <ID>     { System.out.println("\tvalord " + tk.image); }
    | tk = <NUM>    { System.out.println("\tmete " + tk.image); }
}