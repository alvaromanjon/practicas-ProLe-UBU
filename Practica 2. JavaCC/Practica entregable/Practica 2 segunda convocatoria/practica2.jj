PARSER_BEGIN(MaqPilaAbstrTrad)

public class MaqPilaAbstrTrad {
   public static void main(String[] args) {
      MaqPilaAbstrTrad parser;
      try {
         if ( args.length < 1 ) {
            System.err.println("input?");
            parser = new MaqPilaAbstrTrad(System.in);
         } else {
            parser = new MaqPilaAbstrTrad(new java.io.FileReader(args[0]));
         }
         parser.stmtsequence();
         System.out.println("Syntax is okay");
      } catch (java.io.IOException e) {
         System.out.println("Problem opening file: "+e.getMessage());
      } catch (TokenMgrError e) {
         System.out.println("TokenManager failed: " + e.getMessage());
      } catch (ParseException e) {
         System.out.println("Syntax check failed: " + e.getMessage());
      }
   }
}

PARSER_END(MaqPilaAbstrTrad)

SKIP: { " " | "\t" | "\n" | "\r" }

TOKEN : {
    < #DIGIT : ["0"-"9"] >
    | < #LETTER : ["a"-"z","A"-"Z"] >
    | < REPEAT : "repeat" >
    | < UNTIL : "until" >
    | < IF : "if" >
    | < THEN : "then" >
    | < ENDIF : "endif" >
    | < SWITCH : "switch" >
    | < ENDSWITCH : "endswitch" >
    | < ELSE : "else" >
    | < CASE : "case" >
    | < RANGE : "range" >
    | < PRINT : "print" >
    | < ID : <LETTER> (<LETTER> | <NUM>)* >
    | < NUM : (<DIGIT>)+ >
    | < EQUAL : "=" >
    | < COLON : ":" >
    | < RANGEDOTS : ".." >
    | < COMMA : "," >
    | < OPENPAREN: "(" >
    | < CLOSEPAREN: ")" >
    | < PLUS: "+" >
    | < MINUS: "-" >
    | < MULTIPLY: "*" >
    | < DIVIDE: "/" >
}

MORE: {
    <StartCOM : "/*"> : COM
}

<COM>SKIP: {
    <EndCom : "*/"> : DEFAULT
    | < ~[]>
}

void stmtsequence() : {
}
{
    programstmt() stmtsequenceP()
}

void stmtsequenceP() : {
}
{
    ( programstmt() stmtsequenceP() )?
}

void programstmt() : {
}
{
    assigconstruct()
    | loopconstruct()
    | ifconstruct()
    | switchconstruct()
    | printstmt()
}

void loopconstruct() : {
}
{
    <REPEAT> stmtsequence() <UNTIL> expr()
}

void ifconstruct() : {
}
{
    <IF> expr() <THEN> stmtsequence()
    <ENDIF>
}

void switchconstruct() : {
}
{
    <SWITCH> expr() <COLON> listtests()
    (<ENDSWITCH>
    | <ELSE> <COLON> stmtsequence() <ENDSWITCH>)
}

void listtests() : {
}
{
    test() listtestsP()
}

void listtestsP() : {
}
{
    ( test() listtestsP() )?
}

void test() : {
}
{
    <CASE> expr() <COLON> stmtsequence()
    | <RANGE> expr() <RANGEDOTS> expr() <COLON> stmtsequence()
}

void printstmt() : {
    int res = 0;
}
{
    <PRINT>
    res = listexpr()  { System.out.println("\tprint " + res); }
}

int listexpr() : {
    int res;
}
{
    expr() { res = 1; }
    res = listexprP(res)
    { return res; }
}

int listexprP(int res) : {
}
{
    ( <COMMA> expr() { res = res + 1; } res = listexprP(res) )?
    { return res; }
}

void assigconstruct() : {
    Token tk;
}
{
    tk=<ID> <EQUAL>
    { System.out.println("\tvalori " + tk.image); }
    expr()
    { System.out.println("\tasigna"); }

}

void expr() : {
}
{
    multexpr() ( <PLUS> multexpr() { System.out.println("\tsum"); }
    | <MINUS> multexpr() { System.out.println("\tsub"); } )*
}

void multexpr() : {
}
{
    value() ( <MULTIPLY> value()  { System.out.println("\tmul"); }
    | <DIVIDE> value() { System.out.println("\tdiv"); } )*
}

void value() : {
   Token tk;
}
{
    <OPENPAREN> expr() <CLOSEPAREN>
    | tk = <ID>     { System.out.println("\tvalord " + tk.image); }
    | tk = <NUM>    { System.out.println("\tmete " + tk.image); }
}