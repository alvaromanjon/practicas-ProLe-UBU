/**
* Práctica 2 2a convocatoria
* Procesadores del Lenguaje
* Curso 2022/2023
*
* @author Álvaro Manjón Vara
* @date 26-01-2023
*/

 // Definición del parser
PARSER_BEGIN(MaqPilaAbstrTrad)

public class MaqPilaAbstrTrad {
   public static void main(String[] args) {
       // Creación del parser
      MaqPilaAbstrTrad parser;
      try {
          // Entrada a mano
         if ( args.length < 1 ) {
            System.err.println("input?");
            parser = new MaqPilaAbstrTrad(System.in);
            // Entrada por fichero
         } else {
            parser = new MaqPilaAbstrTrad(new java.io.FileReader(args[0]));
         }
         parser.stmtsequence();
         System.out.println("Syntax is okay");
      } catch (java.io.IOException e) {
         System.out.println("Problem opening file: "+e.getMessage());
      } catch (TokenMgrError e) {
         System.out.println("TokenManager failed: " + e.getMessage());
      } catch (ParseException e) {
         System.out.println("Syntax check failed: " + e.getMessage());
      }
   }
    // Variable estática para las etiquetas
   static private int nextNumber = -1;
   private static int getNextNumber() {
       return ++nextNumber;
   }
}

PARSER_END(MaqPilaAbstrTrad)

// Definición de los tókenes Skip
SKIP: { " " | "\t" | "\n" | "\r" }

// Definición de los tókenes
TOKEN : {
    < #DIGIT : ["0"-"9"] >
    | < #LETTER : ["a"-"z","A"-"Z"] >
    | < REPEAT : "repeat" >
    | < UNTIL : "until" >
    | < IF : "if" >
    | < THEN : "then" >
    | < ENDIF : "endif" >
    | < SWITCH : "switch" >
    | < ENDSWITCH : "endswitch" >
    | < ELSE : "else" >
    | < CASE : "case" >
    | < RANGE : "range" >
    | < PRINT : "print" >
    | < ID : <LETTER> (<LETTER> | <DIGIT>)* >
    | < NUM : (<DIGIT>)+ >
    | < EQUAL : "=" >
    | < COLON : ":" >
    | < RANGEDOTS : ".." >
    | < COMMA : "," >
    | < OPENPAREN: "(" >
    | < CLOSEPAREN: ")" >
    | < PLUS: "+" >
    | < DOUBLEPLUS: "++" >
    | < MINUS: "-" >
    | <DOUBLEMINUS: "--" >
    | < MULTIPLY: "*" >
    | < DIVIDE: "/" >
}

// Reglas para ignorar comentarios
MORE: {
    < StartCOM : "/*" > : COM
}

<COM>SKIP: {
    < EndCom : "*/" > : DEFAULT
    | < ~[]>
}

/**
* stmtsequence -> programstmt
*               |  programstmt stmtsequence
* Con la eliminación de la recursión izquierda pasa a ser:
* stmtsequence -> programstmt stmtsequenceP
*/
void stmtsequence() : {
}
{
    programstmt() stmtsequenceP()
}

/**
* stmtsequenceP -> programstmt stmtsequenceP
*/
void stmtsequenceP() : {
}
{
    ( programstmt() stmtsequenceP() )?
}

/**
* programstmt -> assigconstruct
*             |  loopconstruct
*             |  ifconstruct
*             |  switchconstruct
*             |  printstmt
*/
void programstmt() : {
}
{
    assigconstruct()
    | loopconstruct()
    | ifconstruct()
    | switchconstruct()
    | printstmt()
}

/**
* loopconstruct -> REPEAT stmtsequence UNTIL expr
*/
void loopconstruct() : {
    int label = getNextNumber();
}
{
    <REPEAT> { System.out.println("LBL" + label); }
    stmtsequence() <UNTIL> expr() { System.out.println("\tsifalsovea LBL" + label); }
}

/**
* ifconstruct -> IF expr THEN stmtsequence ENDIF
*/
void ifconstruct() : {
    int label = getNextNumber();
}
{
    <IF> expr()
    { System.out.println("\tsifalsovea LBL" + label); }
    <THEN> stmtsequence() <ENDIF>
    { System.out.println("LBL" + label); }
}

/**
* switchconstruct -> SWITCH expr ':' listtests ENDSWITCH
*                 |  SWITCH expr ':' listtests ELSE stmtsequence ENDSWITCH
*/
void switchconstruct() : {
    int initialLabel = getNextNumber();
    int currentLabel = -1;
}
{
    <SWITCH> expr() <COLON>
    currentLabel = listtests(initialLabel)
    (<ENDSWITCH>
    { System.out.println("LBL" + currentLabel);
    System.out.println("LBL" + initialLabel); }
    | <ELSE> <COLON>
    { System.out.println("LBL" + currentLabel); }
     stmtsequence() <ENDSWITCH>
    { System.out.println("LBL" + initialLabel); } )
}

/**
* listtests -> test | listtests test
* Con la eliminación de la recursión izquierda pasa a ser:
* listtests -> test listtestsP
* @param firstLabel: Etiqueta inicial
* @return currentLabel: Etiqueta actual
*/
int listtests(int firstLabel) : {
    int currentLabel = -1;
    int isFirstElem = -1;
}
{
    currentLabel = test(firstLabel, currentLabel, isFirstElem)
    {isFirstElem = 0; }
    currentLabel = listtestsP(firstLabel, currentLabel, isFirstElem)
    { return currentLabel; }
}

/**
* listtestsP -> test listtestsP
* @param firstLabel: Etiqueta inicial
* @param currentLabel: Etiqueta actual
* @param isFirstElem: Indica si es la primera vez que se llega a test
* @return currentLabel: Etiqueta actual
*/
int listtestsP(int firstLabel, int currentLabel, int isFirstElem) : {
}
{
    ( currentLabel = test(firstLabel, currentLabel, isFirstElem)
    currentLabel = listtestsP(firstLabel, currentLabel, isFirstElem) )?
    { return currentLabel; }
}

/**
* test -> CASE E: stmtsequence
*       |  RANGE E..E: stmtsequence
* @param firstLabel: Etiqueta inicial
* @param currentLabel: Etiqueta actual
* @param isFirstElem: Indica si es la primera vez que se llega a test
* @return nextLabel: Etiqueta siguiente
*/
int test(int firstLabel, int currentLabel, int isFirstElem) : {
    int nextLabel = -1;
    if (isFirstElem == 0) { System.out.println("LBL" + currentLabel); }
}
{
    <CASE>
    { System.out.println("\tduplica"); }
    expr() <COLON>
    { System.out.println("\tigual");
    nextLabel = getNextNumber();
    System.out.println("\tsifalsovea LBL" + nextLabel); }
    stmtsequence()
    { System.out.println("\tvea LBL" + firstLabel); }
    { return nextLabel; }
    |
    <RANGE>
    { System.out.println("\tduplica"); }
    expr()
    { System.out.println("\tintercambia");
    System.out.println("\tmenoroigual");
    nextLabel = getNextNumber();
    System.out.println("\tsifalsovea LBL" + nextLabel); }
    <RANGEDOTS>
    { System.out.println("\tduplica"); }
    expr() <COLON>
    { System.out.println("\tmenoroigual");
    System.out.println("\tsifalsovea LBL" + nextLabel); }
    stmtsequence()
    { System.out.println("\tvea LBL" + firstLabel); }
    {return nextLabel;}
}

/**
* printstmt -> PRINT listexpr
*/
void printstmt() : {
    int res = 0;
}
{
    <PRINT>
    res = listexpr()  { System.out.println("\tprint " + res); }
}

/**
* listexpr  -> expr | listexpr ',' expr
* Con la eliminación de la recursión izquierda pasa a ser:
* listexpr -> expr listexprP
* @return res: Número de expresiones
*/
int listexpr() : {
    int res;
}
{
    expr() { res = 1; }
    res = listexprP(res)
    { return res; }
}

/**
* listexprP -> ',' expr listexprP
* @param res: Número de expresiones
* @return res: Número de expresiones
*/
int listexprP(int res) : {
}
{
    ( <COMMA> expr() { res = res + 1; } res = listexprP(res) )?
    { return res; }
}

/**
* assigconstruct -> ID '=' expr
* Se han añadido las reglas para los operadores de incremento y decremento:
*                 | ID '++' expr
*                 | ID '--' expr
*/
void assigconstruct() : {
    Token tk;
}
{
    tk=<ID>
    (<EQUAL> { System.out.println("\tvalori " + tk.image); }
    expr() { System.out.println("\tasigna"); }
    | <DOUBLEPLUS> { System.out.println("\tvalori " + tk.image);
                    System.out.println("\tvalord " + tk.image);
                    System.out.println("\tmete 1");
                    System.out.println("\tsum");
                    System.out.println("\tasigna"); }
    | <DOUBLEMINUS> { System.out.println("\tvalori " + tk.image);
                    System.out.println("\tvalord " + tk.image);
                    System.out.println("\tmete 1");
                    System.out.println("\tsub");
                    System.out.println("\tasigna"); })
}

/**
* expr -> multexp ('+' multexp | '-' multexp)*
*/
void expr() : {
}
{
    multexpr() ( <PLUS> multexpr() { System.out.println("\tsum"); }
    | <MINUS> multexpr() { System.out.println("\tsub"); } )*
}

/**
* multexp -> value ('*' value | '/' value)*
*/
void multexpr() : {
}
{
    value() ( <MULTIPLY> value()  { System.out.println("\tmul"); }
    | <DIVIDE> value() { System.out.println("\tdiv"); } )*
}

/**
* value -> '(' expr ')' | ID | NUM
*/
void value() : {
   Token tk;
}
{
    <OPENPAREN> expr() <CLOSEPAREN>
    | tk = <ID>     { System.out.println("\tvalord " + tk.image); }
    | tk = <NUM>    { System.out.println("\tmete " + tk.image); }
}