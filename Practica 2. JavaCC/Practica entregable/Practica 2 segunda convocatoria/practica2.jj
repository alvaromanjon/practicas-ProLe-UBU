PARSER_BEGIN(MaqPilaAbstrTrad)

public class MaqPilaAbstrTrad {
   public static void main(String[] args) {
      MaqPilaAbstrTrad parser;
      try {
         if ( args.length < 1 ) {
            System.err.println("input?");
            parser = new MaqPilaAbstrTrad(System.in);
         } else {
            parser = new MaqPilaAbstrTrad(new java.io.FileReader(args[0]));
         }
         parser.stmtsequence();
         System.out.println("Syntax is okay");
      } catch (java.io.IOException e) {
         System.out.println("Problem opening file: "+e.getMessage());
      } catch (TokenMgrError e) {
         System.out.println("TokenManager failed: " + e.getMessage());
      } catch (ParseException e) {
         System.out.println("Syntax check failed: " + e.getMessage());
      }
   }
}

PARSER_END(MaqPilaAbstrTrad)

SKIP: { " " | "\t" | "\n" | "\r" }

TOKEN : {
    < #DIGIT : ["0"-"9"] >
    | < #LETTER : ["a"-"z","A"-"Z"] >
    | < REPEAT : "repeat" >
    | < UNTIL : "until" >
    | < IF : "if" >
    | < THEN : "then" >
    | < ENDIF : "endif" >
    | < SWITCH : "switch" >
    | < ENDSWITCH : "endswitch" >
    | < ELSE : "else" >
    | < CASE : "case" >
    | < RANGE : "range" >
    | < PRINT : "print" >
    | < ID : <LETTER> (<LETTER> | <NUM>)* >
    | < NUM : (<DIGIT>)+ >
    | < EQUAL : "=" >
    | < COLON : ":" >
    | < RANGEDOTS : ".." >
    | < OPENPAREN: "(" >
    | < CLOSEPAREN: ")" >
    | < PLUS: "+" >
    | < MINUS: "-" >
    | < MULTIPLY: "*" >
    | < DIVIDE: "/" >
}

MORE: {
    <StartCOM : "/*"> : COM
}

<COM>SKIP: {
    <EndCom : "*/"> : DEFAULT
    | < ~[]>
}

void stmtsequence() : { }
{
    programstmt() ( stmtsequence() )?
    <EOF>
}

void programstmt() : { }
{
    assigconstruct()
    | loopconstruct()
    | ifconstruct()
    | switchconstruct()
    | printstmt()
}

void loopconstruct() : { }
{
    <REPEAT> stmtsequence() <UNTIL> expr()
}

void ifconstruct() : { }
{
    <IF> expr() <THEN> stmtsequence()
    //( <ELSE> stmtsequence() )?
    <ENDIF>
}

void switchconstruct() : { }
{
    <SWITCH> expr() <COLON> listtests()
    (<ENDSWITCH>
    | <ELSE> stmtsequence() <ENDSWITCH>)
}

void listtests() : { }
{
    test() (listtests())?
}

void test() : { }
{
    <CASE> (<NUM>)+ <COLON> stmtsequence()
    | <RANGE> (<NUM>)+ <RANGEDOTS> (<NUM>)+ <COLON> stmtsequence()
}

void printstmt() : { }
{
    <PRINT> listexpr()
}

void listexpr() : { }
{
    expr() ("," expr())*
}

void assigconstruct() : { }
{
    <ID> <EQUAL> expr()
}

void expr() : { }
{
    multexpr() ( <PLUS> multexpr() | <MINUS> multexpr() )*
}

void multexpr() : { }
{
    value() ( <MULTIPLY> value() | <DIVIDE> value() )*
}

void value() : { }
{
    <OPENPAREN> expr() <CLOSEPAREN>
    | <ID>
    | <NUM>
}